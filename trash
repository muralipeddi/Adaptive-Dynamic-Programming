# ~/Desktop/f1tenth_ws/src/adp_controller/scripts/utils/generate_adp_gain_table.py

#!/usr/bin/env python3

import numpy as np
from scipy import linalg
import os

# Vehicle parameters (example values â€” tune to your car)
m = 3.47      # kg
Iz = 0.04712  # kg*m^2
lf = 0.125    # m
lr = 0.125    # m
Cf = 4.718e1  # N/rad
Cr = 5.456e1  # N/rad

# Cost matrices
Q = np.diag([5.0, 0.5, 5.0, 0.5])
R = np.array([[1.0]])

# Discretization grid
vx_grid = np.arange(0.5, 15.1, 0.5)   # [0.5, 1.0, ..., 15.0] m/s
kappa_grid = np.linspace(-3.0, 3.0, 25)  # 25 points in [-3, 3]

# Output shape: (V, K, 1, 4)
K_table = np.zeros((len(vx_grid), len(kappa_grid), 1, 4))

# Compute gain for each (Vx, kappa)
for i, Vx in enumerate(vx_grid):
    for j, kappa in enumerate(kappa_grid):
        try:
            A = np.array([
                [0, 1, 0, 0],
                [0, -(2*Cf + 2*Cr)/(m*Vx), (2*Cf + 2*Cr)/m, -(2*Cf*lf - 2*Cr*lr)/(m*Vx)],
                [0, 0, 0, 1],
                [0, -(2*Cf*lf - 2*Cr*lr)/(Iz*Vx), (2*Cf*lf - 2*Cr*lr)/Iz, -(2*Cf*lf**2 + 2*Cr*lr**2)/(Iz*Vx)]
            ])

            B = np.array([[0], [2*Cf/m], [0], [2*Cf*lf/Iz]])

            # Solve continuous Riccati equation
            P = linalg.solve_continuous_are(A, B, Q, R)
            K = np.linalg.inv(R) @ B.T @ P
            K_table[i, j, 0, :] = K

        except Exception as e:
            print(f"[WARNING] Riccati failed at Vx={Vx:.2f}, kappa={kappa:.2f}. Using zero gain.")
            K_table[i, j, 0, :] = 0.0

# Save
save_dir = os.path.dirname(__file__)
np.save(os.path.join(save_dir, "K_table.npy"), K_table)
np.save(os.path.join(save_dir, "vx_grid.npy"), vx_grid)
np.save(os.path.join(save_dir, "kappa_grid.npy"), kappa_grid)

print(f"Saved: K_table {K_table.shape}, Vx grid {vx_grid.shape}, kappa grid {kappa_grid.shape}")
