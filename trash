# ~/Desktop/f1tenth_ws/src/adp_controller/scripts/utils/lqr_data_collector.py

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import Float32MultiArray
from ackermann_msgs.msg import AckermannDriveStamped
from nav_msgs.msg import Odometry
import numpy as np

class LQRDataCollector(Node):
    def __init__(self):
        super().__init__('lqr_data_collector')

        # --- Parameters --- #
        self.fixed_speed = 3.0  # m/s (change this manually)
        self.K = np.array([-1.5, -0.2, -2.0, -0.3])  # temporary gain

        # --- State --- #
        self.frenet_errors = None
        self.vx = 0.0

        # --- Interfaces --- #
        self.create_subscription(Float32MultiArray, '/frenet_errors', self.frenet_callback, 10)
        self.create_subscription(Odometry, '/ego_racecar/odom', self.odom_callback, 10)
        self.drive_pub = self.create_publisher(AckermannDriveStamped, '/drive', 10)
        self.create_timer(0.02, self.control_loop)  # 50 Hz

        self.get_logger().info(f"LQR Data Collector running at {self.fixed_speed:.1f} m/s")

    def frenet_callback(self, msg):
        self.frenet_errors = msg.data

    def odom_callback(self, msg):
        self.vx = msg.twist.twist.linear.x

    def control_loop(self):
        if self.frenet_errors is None:
            return

        e_y, dot_e_y, e_psi, dot_e_psi, _ = self.frenet_errors
        x = np.array([e_y, dot_e_y, e_psi, dot_e_psi])

        delta = float(-np.dot(self.K, x))
        delta = np.clip(delta, -0.4189, 0.4189)

        msg = AckermannDriveStamped()
        msg.drive.steering_angle = delta
        msg.drive.speed = self.fixed_speed
        self.drive_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = LQRDataCollector()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
