#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from std_msgs.msg import Float32MultiArray
from nav_msgs.msg import Odometry
from ackermann_msgs.msg import AckermannDriveStamped

import numpy as np
import os


class ADPRacelineController(Node):
    def __init__(self):
        super().__init__('adp_raceline_control')

        # === Load learned K ===
        from ament_index_python.packages import get_package_share_directory
        data_dir = os.path.join(
            get_package_share_directory('adp_controller'),
            'data'
        )
        k_path = os.path.join(data_dir, "K_learned.npy")
        if not os.path.exists(k_path):
            raise FileNotFoundError(f"[‚ùå] Learned gain file not found at {k_path}")
        self.K_learned = np.load(k_path)  # shape: (1, 4)

        self.get_logger().info("Using learned K: " + np.array2string(self.K_learned))

        # === State ===
        self.frenet_errors = None
        self.vx = 0.0

        # === ROS interfaces ===
        self.create_subscription(Float32MultiArray, '/frenet_errors', self.frenet_callback, 10)
        self.create_subscription(Odometry, '/ego_racecar/odom', self.odom_callback, 10)
        self.drive_pub = self.create_publisher(AckermannDriveStamped, '/drive', 10)
        self.create_timer(0.02, self.control_loop)  # 50 Hz

        self.get_logger().info("ADP Raceline Controller (Version 2) Initialized")

    def frenet_callback(self, msg):
        self.frenet_errors = msg.data

    def odom_callback(self, msg):
        self.vx = msg.twist.twist.linear.x

    def control_loop(self):
        if self.frenet_errors is None:
            return

        e_y, dot_e_y, e_psi, dot_e_psi, kappa = self.frenet_errors
        x = np.array([e_y, dot_e_y, e_psi, dot_e_psi])

        # Compute control using learned K
        delta = float(-np.dot(self.K_learned, x))
        delta = np.clip(delta, -0.4189, 0.4189)

        msg = AckermannDriveStamped()
        msg.drive.steering_angle = delta
        msg.drive.speed = 1.5  # fixed speed; adjust if needed
        self.drive_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = ADPRacelineController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
