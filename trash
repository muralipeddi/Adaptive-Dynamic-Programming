#!/usr/bin/env python3

import rclpy
from rclpy.node import Node

from std_msgs.msg import Float32MultiArray
from ackermann_msgs.msg import AckermannDriveStamped

import numpy as np
import os
from collections import deque

class DataCollector(Node):
    def __init__(self):
        super().__init__('data_collector')

        # Buffers
        self.x_buffer = deque()
        self.u_buffer = deque()
        self.next_x_buffer = deque()

        self.last_x = None
        self.last_u = None

        # Subscribers
        self.create_subscription(Float32MultiArray, '/frenet_errors', self.frenet_callback, 10)
        self.create_subscription(AckermannDriveStamped, '/drive', self.drive_callback, 10)

        self.get_logger().info("Data Collector Initialized")

    def drive_callback(self, msg):
        self.last_u = np.array([msg.drive.steering_angle])

    def frenet_callback(self, msg):
        x_now = np.array(msg.data[:4])  # ignore kappa

        if self.last_x is not None and self.last_u is not None:
            self.x_buffer.append(self.last_x)
            self.u_buffer.append(self.last_u)
            self.next_x_buffer.append(x_now)

        self.last_x = x_now

        # Save if buffer grows large
        if len(self.x_buffer) >= 1000:
            self.save_data()

    def save_data(self):
        save_dir = os.path.join(os.path.expanduser("~"), "Desktop/f1tenth_ws/src/adp_controller/data")
        os.makedirs(save_dir, exist_ok=True)

        np.save(os.path.join(save_dir, "x.npy"), np.stack(self.x_buffer))
        np.save(os.path.join(save_dir, "u.npy"), np.stack(self.u_buffer))
        np.save(os.path.join(save_dir, "x_next.npy"), np.stack(self.next_x_buffer))

        self.get_logger().info(f"Saved {len(self.x_buffer)} samples to {save_dir}")
        self.x_buffer.clear()
        self.u_buffer.clear()
        self.next_x_buffer.clear()

def main(args=None):
    rclpy.init(args=args)
    node = DataCollector()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
