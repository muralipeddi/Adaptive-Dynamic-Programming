# ~/Desktop/f1tenth_ws/src/adp_controller/adp_controller/adp_raceline_runner.py

#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from ackermann_msgs.msg import AckermannDriveStamped
from nav_msgs.msg import Odometry
from std_msgs.msg import Float32MultiArray
from scipy.interpolate import RegularGridInterpolator
import numpy as np
import os
import argparse

class ADPRacelineRunner(Node):
    def __init__(self, target_speed):
        super().__init__('adp_raceline_runner')
        self.target_speed = target_speed
        self.frenet_errors = None
        self.vx = 0.0

        # Load K table and interpolator
        from ament_index_python.packages import get_package_share_directory
        utils_dir = os.path.join(
            get_package_share_directory('adp_controller'), 'scripts', 'utils')

        self.K_table = np.load(os.path.join(utils_dir, "K_table.npy"))
        vx_grid = np.load(os.path.join(utils_dir, "vx_grid.npy"))
        kappa_grid = np.load(os.path.join(utils_dir, "kappa_grid.npy"))
        self.K_interp = RegularGridInterpolator(
            (vx_grid, kappa_grid), self.K_table[:, :, 0, :], bounds_error=False, fill_value=0.0
        )

        # ROS interfaces
        self.create_subscription(Float32MultiArray, '/frenet_errors', self.frenet_callback, 10)
        self.create_subscription(Odometry, '/ego_racecar/odom', self.odom_callback, 10)
        self.drive_pub = self.create_publisher(AckermannDriveStamped, '/drive', 10)

        self.timer = self.create_timer(0.02, self.control_loop)
        self.get_logger().info(f"Raceline runner started at {target_speed:.2f} m/s")

    def frenet_callback(self, msg):
        self.frenet_errors = msg.data

    def odom_callback(self, msg):
        self.vx = msg.twist.twist.linear.x

    def control_loop(self):
        if self.frenet_errors is None:
            return

        e_y, dot_e_y, e_psi, dot_e_psi, kappa = self.frenet_errors
        x = np.array([e_y, dot_e_y, e_psi, dot_e_psi])
        vx = self.target_speed
        kappa = np.clip(kappa, -3.0, 3.0)

        try:
            K = self.K_interp((vx, kappa))
        except:
            self.get_logger().warn("Interpolation failed, using zero gain")
            K = np.zeros(4)

        delta = float(-np.dot(K, x))
        delta = np.clip(delta, -0.4189, 0.4189)

        msg = AckermannDriveStamped()
        msg.drive.steering_angle = delta
        msg.drive.speed = self.target_speed
        self.drive_pub.publish(msg)

        self.get_logger().info_throttle(1.0, f"Published drive command: delta={delta:.3f}, speed={self.target_speed:.2f}")

def main(args=None):
    rclpy.init(args=args)
    import sys
    parser = argparse.ArgumentParser()
    parser.add_argument('--speed', type=float, required=True, help="Target speed in m/s")
    parsed_args, _ = parser.parse_known_args()
    node = ADPRacelineRunner(parsed_args.speed)
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
